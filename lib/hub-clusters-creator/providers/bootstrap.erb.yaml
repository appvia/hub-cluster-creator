---
apiVersion: v1
kind: ConfigMap
metadata:
  name: bootstrap
  namespace: kube-system
data:
  repositories: |
    # installation of loki stack
    loki,https://grafana.github.io/loki/charts
    # installation of the service catalog
    svc-cat,https://svc-catalog-charts.storage.googleapis.com
    <%- if context[:provider].equal?('eks') -%>
    # installation of the aws service broker
    aws-sb,https://awsservicebroker.s3.amazonaws.com/charts
    <%- end -%>

  charts: |
    # helm source for loki stack
    loki/loki-stack,metrics,--values /config/bundles/grafana.yaml
    # helm source for the service catalog
    svc-cat/catalog,catalog,
    <%- if context[:provider].equal?('eks') -%>
    # helm source for the aws service broker
    aws-sb/aws-servicebroker,aws-sb,--set-string aws.targetaccountid=<%= context[:account_id] %> --set aws.region=<%= context[:region] %> --set aws.accesskeyid=<%= context[:access_id] %> --set aws.secretkey=<%= context[:access_key] %>
    <%- end -%>

  grafana.yaml: |
    loki:
      enabled: true
      networkPolicy:
        enabled: true
    promtail:
      enabled: true
    prometheus:
      enabled: true
      server:
        fullnameOverride: prometheus-server
      nodeExporter:
        podSecurityPolicy:
          enabled: true
      networkPolicy:
        enabled: true
    grafana:
      enabled: true
      adminPassword: <%= context[:grafana_password] %>
      image:
        pullPolicy: IfNotPresent
        repository: grafana/grafana
        tag: <%= context[:grafana_version] || 'latest' %>
      sidecar:
        datasources:
          enabled: true
      service:
        <%-
          annotations = {}
          serviceType = 'NodePort'
          case context[:provider]
          when 'eks'
            annotations = {
              'service.beta.kubernetes.io/aws-load-balancer-backend-protocol': 'http'
            }
            serviceType = 'LoadBalancer'
          end
          -%>
        type: <%= serviceType %>
        <%- if annotations.size > 0 -%>
        annotations:
        <%- annotations.each_pair do |k,v| -%>
          '<%= k %>': '<%= v %>'
        <%- end -%>
        <%- end -%>
        port: 80
        targetPort: 3000
      ingress:
        <%- if serviceType == 'NodePort' -%>
        enabled: true
        <%- else -%>
        enabled: false
        <%- end -%>
        hosts:
          - <%= context[:grafana_hostname] %>.<%= context[:domain] %>
        path: '/*'
      networkPolicy:
        enabled: true
      persistence:
        enabled: true
        accessModes:
          - ReadWriteOnce
        size: <%= context[:grafana_disk_size] %><%= context[:grafana_disk_size].to_s.end_with?('Gi') ? '' : 'Gi' %>
      grafana.ini:
        server:
          domain: <%= context[:grafana_hostname] %>.<%= context[:domain] %>
          root_url: http://<%= context[:grafana_hostname] %>.<%= context[:domain] %>
        paths:
          data: /var/lib/grafana/data
          logs: /var/log/grafana
          plugins: /var/lib/grafana/plugins
          provisioning: /etc/grafana/provisioning
        analytics:
          check_for_updates: true
        log:
          mode: console
        grafana_net:
          url: https://grafana.net
        <%- unless (context[:github_client_id] || '').empty? -%>
        auth.github:
          allow_sign_up: true
          <%- unless (context[:github_organization] || '').empty? %>
          allowed_organizations: <%= context[:github_organization] %>
          <%- end %>
          api_url: https://api.github.com/user
          auth_url: https://github.com/login/oauth/authorize
          client_id: <%= context[:github_client_id] %>
          client_secret: <%= context[:github_client_secret] %>
          enabled: true
          scopes: user,read:org
          token_url: https://github.com/login/oauth/access_token
        <%- end -%>
