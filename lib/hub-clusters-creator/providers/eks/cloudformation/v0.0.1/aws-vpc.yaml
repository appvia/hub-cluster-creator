---
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This template creates a Multi-AZ, multi-subnet VPC infrastructure with
  managed NAT gateways in the public subnet for each Availability Zone.
  You can also create additional private subnets with dedicated custom
  network access control lists (ACLs). If you deploy the Quick Start in a
  region that doesn't support NAT gateways, NAT instances are deployed
  instead.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Availability Zone Configuration
      Parameters:
        - AvailabilityZones
        - NumberOfAZs
    - Label:
        default: Network Configuration
      Parameters:
        - VPCCIDR
        - PublicSubnet1CIDR
        - PublicSubnet2CIDR
        - PublicSubnet3CIDR
        - PublicSubnetTag1
        - PublicSubnetTag2
        - PublicSubnetTag3
        - CreatePrivateSubnets
        - PrivateSubnet1ACIDR
        - PrivateSubnet2ACIDR
        - PrivateSubnet3ACIDR
        - PrivateSubnetATag1
        - PrivateSubnetATag2
        - PrivateSubnetATag3
        - CreateAdditionalPrivateSubnets
        - VPCTenancy
    ParameterLabels:
      AvailabilityZones:
        default: Availability Zones
      CreatePrivateSubnets:
        default: Create private subnets
      NumberOfAZs:
        default: Number of Availability Zones
      PrivateSubnet1:
        default: Private subnet 1A CIDR
      PrivateSubnet2:
        default: Private subnet 2A CIDR
      PrivateSubnet3:
        default: Private subnet 3A CIDR
      PrivateSubnetATag1:
        default: Tag for Private A Subnets
      PrivateSubnetATag2:
        default: Tag for Private A Subnets
      PrivateSubnetATag3:
        default: Tag for Private A Subnets
      PublicSubnet1CIDR:
        default: Public subnet 1 CIDR
      PublicSubnet2CIDR:
        default: Public subnet 2 CIDR
      PublicSubnet3CIDR:
        default: Public subnet 3 CIDR
      PublicSubnetTag1:
        default: Tag for Public Subnets
      PublicSubnetTag2:
        default: Tag for Public Subnets
      PublicSubnetTag3:
        default: Tag for Public Subnets
      VPCCIDR:
        default: VPC CIDR
      VPCTenancy:
        default: VPC Tenancy

Parameters:
  ClusterName:
    AllowedPattern: ^[0-9a-zA-Z-/.]*$
    Description: >
      The name of the cluster we are creating, which will be prefixed to
      all the resources provisioned.
    Type: String
  AvailabilityZones:
    Description: >
      List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreatePrivateSubnets:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: >
      Set to false to create only public subnets. If false, the CIDR parameters
      for ALL private subnets will be ignored.
    Type: String
  NumberOfAZs:
    AllowedValues:
      - '2'
      - '3'
    Default: '2'
    Description: >
      Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  PrivateSubnet1ACIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1A located in Availability Zone 1
    Type: String
  PrivateSubnet2ACIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2A located in Availability Zone 2
    Type: String
  PrivateSubnet3ACIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.64.0/19
    Description: CIDR block for private subnet 3A located in Availability Zone 3
    Type: String
  PrivateSubnetATag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Private
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnetATag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PrivateSubnetATag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to private subnets A, in format Key=Value (Optional)
    Type: String
  PublicSubnet1CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.128.0/20
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone
      1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.144.0/20
    Description: CIDR block for the public DMZ subnet 2 located in Availability Zone
      2
    Type: String
  PublicSubnet3CIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.160.0/20
    Description: CIDR block for the public DMZ subnet 3 located in Availability Zone
      3
    Type: String
  PublicSubnetTag1:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: Network=Public
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnetTag2:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  PublicSubnetTag3:
    AllowedPattern: ^([a-zA-Z0-9+\-._:/@]+=[a-zA-Z0-9+\-.,_:/@ *\\"'\[\]\{\}]*)?$
    ConstraintDescription: tags must be in format "Key=Value" keys can only contain
      [a-zA-Z0-9+\-._:/@], values can contain [a-zA-Z0-9+\-._:/@ *\\"'\[\]\{\}]
    Default: ''
    Description: tag to add to public subnets, in format Key=Value (Optional)
    Type: String
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
    - default
    - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String

Conditions:
  3AZCondition:
    Fn::Equals:
      - Ref: NumberOfAZs
      - '3'
  GovCloudCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - us-gov-west-1
  NVirginiaRegionCondition:
    Fn::Equals:
      - Ref: AWS::Region
      - us-east-1
  PrivateSubnetsCondition:
    Fn::Equals:
      - Ref: CreatePrivateSubnets
      - 'true'
  PrivateSubnets&3AZCondition:
    Fn::And:
      - Condition: PrivateSubnetsCondition
      - Condition: 3AZCondition
  PrivateSubnetATag1Condition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PrivateSubnetATag1
          - ''
  PrivateSubnetATag2Condition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PrivateSubnetATag2
          - ''
  PrivateSubnetATag3Condition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PrivateSubnetATag3
          - ''
  PublicSubnetTag1Condition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PublicSubnetTag1
          - ''
  PublicSubnetTag2Condition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PublicSubnetTag2
          - ''
  PublicSubnetTag3Condition:
    Fn::Not:
      - Fn::Equals:
          - Ref: PublicSubnetTag3
          - ''

Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::If:
          - NVirginiaRegionCondition
          - ec2.internal
          - Fn::Sub: "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      InstanceTenancy:
        Ref: VPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: VPC
      DhcpOptionsId:
        Ref: DHCPOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PrivateSubnet1A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1ACIDR
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - ''
            - - !Ref ClusterName
              - '-'
              - Fn::Select:
                - '0'
                - Ref: AvailabilityZones
      - Fn::If:
        - PrivateSubnetATag1Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag1
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag1
        - Ref: AWS::NoValue
      - Fn::If:
        - PrivateSubnetATag2Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag2
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag2
        - Ref: AWS::NoValue
      - Fn::If:
        - PrivateSubnetATag3Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag3
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag3
        - Ref: AWS::NoValue

  PrivateSubnet2A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet2ACIDR
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - ''
            - - !Ref ClusterName
              - '-'
              - Fn::Select:
                - '1'
                - Ref: AvailabilityZones
      - Fn::If:
        - PrivateSubnetATag1Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag1
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag1
        - Ref: AWS::NoValue
      - Fn::If:
        - PrivateSubnetATag2Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag2
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag2
        - Ref: AWS::NoValue
      - Fn::If:
        - PrivateSubnetATag3Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag3
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag3
        - Ref: AWS::NoValue

  PrivateSubnet3A:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet3ACIDR
      AvailabilityZone:
        Fn::Select:
        - '2'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - ''
            - - !Ref ClusterName
              - '-'
              - Fn::Select:
                - '2'
                - Ref: AvailabilityZones
      - Fn::If:
        - PrivateSubnetATag1Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag1
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag1
        - Ref: AWS::NoValue
      - Fn::If:
        - PrivateSubnetATag2Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag2
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag2
        - Ref: AWS::NoValue
      - Fn::If:
        - PrivateSubnetATag3Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag3
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PrivateSubnetATag3
        - Ref: AWS::NoValue

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - ''
            - - !Ref ClusterName
              - '-public-'
              - Fn::Select:
                - '0'
                - Ref: AvailabilityZones
      - Fn::If:
        - PublicSubnetTag1Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag1
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag1
        - Ref: AWS::NoValue
      - Fn::If:
        - PublicSubnetTag2Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag2
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag2
        - Ref: AWS::NoValue
      - Fn::If:
        - PublicSubnetTag3Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag3
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag3
        - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value:
          Fn::Join:
            - ''
            - - !Ref ClusterName
              - '-public-'
              - Fn::Select:
                - '1'
                - Ref: AvailabilityZones
      - Fn::If:
        - PublicSubnetTag1Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag1
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag1
        - Ref: AWS::NoValue
      - Fn::If:
        - PublicSubnetTag2Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag2
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag2
        - Ref: AWS::NoValue
      - Fn::If:
        - PublicSubnetTag3Condition
        - Key:
            Fn::Select:
            - '0'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag3
          Value:
            Fn::Select:
            - '1'
            - Fn::Split:
              - "="
              - Ref: PublicSubnetTag3
        - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true

  PublicSubnet3:
    Condition: 3AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet3CIDR
      AvailabilityZone:
        Fn::Select:
          - '2'
          - Ref: AvailabilityZones
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-public-'
                - Fn::Select:
                  - '2'
                  - Ref: AvailabilityZones
        - Fn::If:
          - PublicSubnetTag1Condition
          - Key:
              Fn::Select:
              - '0'
              - Fn::Split:
                - "="
                - Ref: PublicSubnetTag1
            Value:
              Fn::Select:
              - '1'
              - Fn::Split:
                - "="
                - Ref: PublicSubnetTag1
          - Ref: AWS::NoValue
        - Fn::If:
            - PublicSubnetTag2Condition
            - Key:
                Fn::Select:
                  - '0'
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag2
              Value:
                Fn::Select:
                  - '1'
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag2
            - Ref: AWS::NoValue
        - Fn::If:
            - PublicSubnetTag3Condition
            - Key:
                Fn::Select:
                  - '0'
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag3
              Value:
                Fn::Select:
                  - '1'
                  - Fn::Split:
                      - "="
                      - Ref: PublicSubnetTag3
            - Ref: AWS::NoValue
      MapPublicIpOnLaunch: true

  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-'
                - Fn::Select:
                    - '0'
                    - Ref: AvailabilityZones
        - Key: Network
          Value: Private

  PrivateSubnet1ARoute:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1

  PrivateSubnet1ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1A
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable

  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-'
                - Fn::Select:
                    - '1'
                    - Ref: AvailabilityZones
        - Key: Network
          Value: Private

  PrivateSubnet2ARoute:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnet2ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway2

  PrivateSubnet2ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2A
      RouteTableId:
        Ref: PrivateSubnet2ARouteTable

  PrivateSubnet3ARouteTable:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-'
                - Fn::Select:
                    - '2'
                    - Ref: AvailabilityZones
        - Key: Network
          Value: Private

  PrivateSubnet3ARoute:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnet3ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway3

  PrivateSubnet3ARouteTableAssociation:
    Condition: PrivateSubnets&3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3A
      RouteTableId:
        Ref: PrivateSubnet3ARouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-public'
        - Key: Network
          Value: Public

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicSubnetRouteTable

  PublicSubnet3RouteTableAssociation:
    Condition: 3AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicSubnetRouteTable

  NAT1EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT2EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT3EIP:
    Condition: PrivateSubnets&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway1:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NAT1EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-'
                - Fn::Select:
                    - '0'
                    - Ref: AvailabilityZones

  NATGateway2:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NAT2EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet2
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-'
                - Fn::Select:
                    - '1'
                    - Ref: AvailabilityZones

  NATGateway3:
    Condition: PrivateSubnets&3AZCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NAT3EIP
          - AllocationId
      SubnetId:
        Ref: PublicSubnet3
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ''
              - - !Ref ClusterName
                - '-'
                - Fn::Select:
                    - '2'
                    - Ref: AvailabilityZones

Outputs:
  NAT1EIP:
    Condition: PrivateSubnetsCondition
    Description: NAT 1 IP address
    Value:
      Ref: NAT1EIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NAT1EIP"

  NAT2EIP:
    Condition: PrivateSubnetsCondition
    Description: NAT 2 IP address
    Value:
      Ref: NAT2EIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NAT2EIP"

  NAT3EIP:
    Condition: PrivateSubnets&3AZCondition
    Description: NAT 3 IP address
    Value:
      Ref: NAT3EIP
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NAT3EIP"

  PrivateSubnet1ACIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A CIDR in Availability Zone 1
    Value:
      Ref: PrivateSubnet1ACIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1ACIDR"

  PrivateSubnet1AID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A ID in Availability Zone 1
    Value:
      Ref: PrivateSubnet1A
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1AID"

  PrivateSubnet2ACIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2A CIDR in Availability Zone 2
    Value:
      Ref: PrivateSubnet2ACIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2ACIDR"

  PrivateSubnet2AID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 2A ID in Availability Zone 2
    Value:
      Ref: PrivateSubnet2A
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2AID"

  PrivateSubnet3ACIDR:
    Condition: PrivateSubnets&3AZCondition
    Description: Private subnet 3A CIDR in Availability Zone 3
    Value:
      Ref: PrivateSubnet3ACIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3ACIDR"

  PrivateSubnet3AID:
    Condition: PrivateSubnets&3AZCondition
    Description: Private subnet 3A ID in Availability Zone 3
    Value:
      Ref: PrivateSubnet3A
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3AID"

  PublicSubnet1CIDR:
    Description: Public subnet 1 CIDR in Availability Zone 1
    Value:
      Ref: PublicSubnet1CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1CIDR"

  PublicSubnet1ID:
    Description: Public subnet 1 ID in Availability Zone 1
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet1ID"

  PublicSubnet2CIDR:
    Description: Public subnet 2 CIDR in Availability Zone 2
    Value:
      Ref: PublicSubnet2CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2CIDR"

  PublicSubnet2ID:
    Description: Public subnet 2 ID in Availability Zone 2
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet2ID"

  PublicSubnet3CIDR:
    Condition: 3AZCondition
    Description: Public subnet 3 CIDR in Availability Zone 3
    Value:
      Ref: PublicSubnet3CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet3CIDR"

  PublicSubnet3ID:
    Condition: 3AZCondition
    Description: Public subnet 3 ID in Availability Zone 3
    Value:
      Ref: PublicSubnet3
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnet3ID"

  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Value:
      Ref: PrivateSubnet1ARouteTable
    Description: Private subnet 1A route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet1ARouteTable"

  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Value:
      Ref: PrivateSubnet2ARouteTable
    Description: Private subnet 2A route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet2ARouteTable"

  PrivateSubnet3ARouteTable:
    Condition: PrivateSubnets&3AZCondition
    Value:
      Ref: PrivateSubnet3ARouteTable
    Description: Private subnet 3A route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PrivateSubnet3ARouteTable"

  PublicSubnetRouteTable:
    Value:
      Ref: PublicSubnetRouteTable
    Description: Public subnet route table
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PublicSubnetRouteTable"

  VPCCIDR:
    Value:
      Ref: VPCCIDR
    Description: VPC CIDR
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCCIDR"

  VPCID:
    Value:
      Ref: VPC
    Description: VPC ID
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-VPCID"
